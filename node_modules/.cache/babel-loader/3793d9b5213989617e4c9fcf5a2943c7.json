{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport API from \"../API/API\"; // Helpers\n\nimport { isPersistedState } from \"../helpers/helpers\"; // Types\n\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); // Get directors only\n\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        setState({ ...movie,\n          actors: credits.cast,\n          directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId.toString());\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]); // Write to sessionStorage\n\n  useEffect(() => {\n    sessionStorage.setItem(movieId.toString(), JSON.stringify(state));\n  }, [movieId, state]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"lH8ElTKe8L996G7M+ZnCie8/Sko=\");","map":{"version":3,"sources":["E:/Studia/Sem5/Aplikacje JavaScript/movies-app/src/hooks/useMovieFetch.ts"],"names":["useState","useEffect","API","isPersistedState","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","sessionState","toString","sessionStorage","setItem","JSON","stringify"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAuC,YAAvC,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CAEA;;AAGA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAA2B;AAAA;;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAa,EAAb,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,UAAU,GAAG,YAAY;AAC7B,UAAI;AACFH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,cAAME,KAAK,GAAG,MAAMX,GAAG,CAACU,UAAJ,CAAeP,OAAf,CAApB;AACA,cAAMS,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBV,OAAjB,CAAtB,CALE,CAMF;;AACA,cAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CAChBC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADT,CAAlB;AAIAb,QAAAA,QAAQ,CAAC,EACP,GAAGM,KADI;AAEPQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFT;AAGPN,UAAAA;AAHO,SAAD,CAAR;AAMAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAtBD;;AAwBA,UAAMY,YAAY,GAAGpB,gBAAgB,CAACE,OAAO,CAACmB,QAAR,EAAD,CAArC;;AAEA,QAAID,YAAJ,EAAkB;AAChBhB,MAAAA,QAAQ,CAACgB,YAAD,CAAR;AACAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACD;;AAEDG,IAAAA,UAAU;AACX,GAlCQ,EAkCN,CAACP,OAAD,CAlCM,CAAT,CALsD,CAyCtD;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,cAAc,CAACC,OAAf,CAAuBrB,OAAO,CAACmB,QAAR,EAAvB,EAA2CG,IAAI,CAACC,SAAL,CAAetB,KAAf,CAA3C;AACD,GAFQ,EAEN,CAACD,OAAD,EAAUC,KAAV,CAFM,CAAT;AAIA,SAAO;AAAEA,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACD,CA/CM;;GAAMN,a","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API, { Movie, Cast , Crew} from \"../API/API\";\r\n\r\n// Helpers\r\nimport { isPersistedState } from \"../helpers/helpers\";\r\n\r\n// Types\r\nexport type MovieState = Movie & { actors: Cast[]; directors: Crew[] };\r\n\r\nexport const useMovieFetch = (movieId: string | any) => {\r\n  const [state, setState] = useState<MovieState>({} as MovieState);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovie = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const movie = await API.fetchMovie(movieId);\r\n        const credits = await API.fetchCredits(movieId);\r\n        // Get directors only\r\n        const directors = credits.crew.filter(\r\n          member => member.job === 'Director'\r\n        );\r\n\r\n        setState({\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors\r\n        });\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n\r\n    const sessionState = isPersistedState(movieId.toString());\r\n\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    fetchMovie();\r\n  }, [movieId]);\r\n\r\n  // Write to sessionStorage\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId.toString(), JSON.stringify(state));\r\n  }, [movieId, state]);\r\n\r\n  return { state, loading, error };\r\n};"]},"metadata":{},"sourceType":"module"}