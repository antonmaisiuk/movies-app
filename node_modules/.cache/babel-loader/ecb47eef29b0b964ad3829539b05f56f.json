{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\"; // API\n\nimport API from \"../API/API\"; // Helpers\n\nimport { isPersistedState } from \"../helpers/helpers\";\nconst intialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [state, setState] = useState(intialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setEror] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async function (page) {\n    let searchTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    try {\n      setEror(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      console.log(movies);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setEror(true);\n    }\n\n    setLoading(false);\n  }; // Initial\n\n\n  useEffect(() => {\n    fetchMovies(1);\n  }, []); // Search\n\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState(\"homeState\");\n\n      if (sessionState) {\n        console.log(\"GRABBING FROM SESSION STORAGE\");\n        setState(sessionState);\n        return;\n      }\n    }\n\n    setState(intialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]); // Load More Button\n\n  useEffect(() => {\n    if (!isLoadingMore) {\n      return;\n    }\n\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]); // Write to sessionStorage\n\n  useEffect(() => {\n    if (!searchTerm) {\n      return sessionStorage.setItem(\"homeState\", JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n  return {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"yb/lcYEsxveEUdj4xfmnygluY3E=\");","map":{"version":3,"sources":["E:/Studia/Sem5/Aplikacje JavaScript/movies-app/src/hooks/useHomeFetch.ts"],"names":["useState","useEffect","API","isPersistedState","intialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setEror","isLoadingMore","setIsLoadingMore","fetchMovies","movies","console","log","prev","sessionState","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\n// API\r\nimport API, {Movie} from \"../API/API\";\r\n// Helpers\r\nimport { isPersistedState } from \"../helpers/helpers\";\r\n\r\nconst intialState = {\r\n  page: 0,\r\n  results: [] as Movie[],\r\n  total_pages: 0,\r\n  total_results: 0,\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state, setState] = useState(intialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setEror] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page:number, searchTerm = \"\") => {\r\n    try {\r\n      setEror(false);\r\n      setLoading(true);\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n      console.log(movies);\r\n      setState((prev) => ({\r\n        ...movies,\r\n        results:\r\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setEror(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Initial\r\n  useEffect(() => {\r\n    fetchMovies(1);\r\n  }, []);\r\n\r\n  // Search\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState(\"homeState\");\r\n\r\n      if (sessionState) {\r\n        console.log(\"GRABBING FROM SESSION STORAGE\");\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n    setState(intialState);\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  // Load More Button\r\n  useEffect(() => {\r\n    if (!isLoadingMore) {\r\n      return;\r\n    }\r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setIsLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  // Write to sessionStorage\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      return sessionStorage.setItem(\"homeState\", JSON.stringify(state));\r\n    }\r\n  }, [searchTerm, state]);\r\n\r\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}