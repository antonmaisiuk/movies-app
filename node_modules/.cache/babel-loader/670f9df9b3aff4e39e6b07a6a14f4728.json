{"ast":null,"code":"import { SEARCH_BASE_URL, POPULAR_BASE_URL, API_URL, API_KEY, REQUEST_TOKEN_URL, LOGIN_URL, SESSION_ID_URL } from \"../config/config\";\nconst defaultConfig = {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}; // Types\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}` : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    }; // First authenticate the requestToken\n\n    const data = await (await fetch(LOGIN_URL, { ...defaultConfig,\n      body: JSON.stringify(bodyData)\n    })).json(); // Then get the sessionId with the requestToken\n\n    if (data.success) {\n      const sessionId = await (await fetch(SESSION_ID_URL, { ...defaultConfig,\n        body: JSON.stringify({\n          request_token: requestToken\n        })\n      })).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n    const rating = await (await fetch(endpoint, { ...defaultConfig,\n      body: JSON.stringify({\n        value\n      })\n    })).json();\n    return rating;\n  }\n};\nexport default apiSettings;","map":{"version":3,"sources":["E:/Studia/Sem5/Aplikacje JavaScript/movies-app/src/API/API.ts"],"names":["SEARCH_BASE_URL","POPULAR_BASE_URL","API_URL","API_KEY","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","data","body","JSON","stringify","success","sessionId","rateMovie","value","rating"],"mappings":"AAAA,SACEA,eADF,EAEEC,gBAFF,EAGEC,OAHF,EAIEC,OAJF,EAKEC,iBALF,EAMEC,SANF,EAOEC,cAPF,QAQO,kBARP;AAUA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,MADY;AAEpBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFW,CAAtB,C,CAOA;;AA0CA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,WAAW,EAAE,OAAOC,UAAP,EAA0BC,IAA1B,KAA4D;AACvE,UAAMC,QAAe,GAAGF,UAAU,GAC7B,GAAEZ,eAAgB,GAAEY,UAAW,SAAQC,IAAK,EADf,GAE7B,GAAEZ,gBAAiB,SAAQY,IAAK,EAFrC;AAGA,WAAO,MAAM,CAAC,MAAME,KAAK,CAACD,QAAD,CAAZ,EAAwBE,IAAxB,EAAb;AACD,GANiB;AAOlBC,EAAAA,UAAU,EAAE,MAAOC,OAAP,IAA2C;AACrD,UAAMJ,QAAe,GAAI,GAAEZ,OAAQ,SAAQgB,OAAQ,YAAWf,OAAQ,EAAtE;AACA,WAAO,MAAM,CAAC,MAAMY,KAAK,CAACD,QAAD,CAAZ,EAAwBE,IAAxB,EAAb;AACD,GAViB;AAWlBG,EAAAA,YAAY,EAAE,MAAOD,OAAP,IAA6C;AACzD,UAAME,eAAsB,GAAI,GAAElB,OAAQ,SAAQgB,OAAQ,oBAAmBf,OAAQ,EAArF;AACA,WAAO,MAAM,CAAC,MAAMY,KAAK,CAACK,eAAD,CAAZ,EAA+BJ,IAA/B,EAAb;AACD,GAdiB;AAelB;AACAK,EAAAA,eAAe,EAAE,YAAY;AAC3B,UAAMC,QAAQ,GAAG,MAAM,CAAC,MAAMP,KAAK,CAACX,iBAAD,CAAZ,EAAiCY,IAAjC,EAAvB;AACA,WAAOM,QAAQ,CAACC,aAAhB;AACD,GAnBiB;AAoBlBC,EAAAA,YAAY,EAAE,OAAOC,YAAP,EAA6BC,QAA7B,EAA8CC,QAA9C,KAAkE;AAC9E,UAAMC,QAAQ,GAAG;AACfF,MAAAA,QADe;AAEfC,MAAAA,QAFe;AAGfJ,MAAAA,aAAa,EAAEE;AAHA,KAAjB,CAD8E,CAM9E;;AACA,UAAMI,IAAI,GAAG,MAAM,CACjB,MAAMd,KAAK,CAACV,SAAD,EAAY,EACrB,GAAGE,aADkB;AAErBuB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AAFe,KAAZ,CADM,EAKjBZ,IALiB,EAAnB,CAP8E,CAa9E;;AACA,QAAIa,IAAI,CAACI,OAAT,EAAkB;AAChB,YAAMC,SAAS,GAAG,MAAM,CACtB,MAAMnB,KAAK,CAACT,cAAD,EAAiB,EAC1B,GAAGC,aADuB;AAE1BuB,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,UAAAA,aAAa,EAAEE;AAAjB,SAAf;AAFoB,OAAjB,CADW,EAKtBT,IALsB,EAAxB;AAMA,aAAOkB,SAAP;AACD;AACF,GA3CiB;AA4ClBC,EAAAA,SAAS,EAAE,OAAOD,SAAP,EAA0BhB,OAA1B,EAA0CkB,KAA1C,KAA2D;AACpE,UAAMtB,QAAQ,GAAI,GAAEZ,OAAQ,SAAQgB,OAAQ,mBAAkBf,OAAQ,eAAc+B,SAAU,EAA9F;AAEA,UAAMG,MAAM,GAAG,MAAM,CACnB,MAAMtB,KAAK,CAACD,QAAD,EAAW,EACpB,GAAGP,aADiB;AAEpBuB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEI,QAAAA;AAAF,OAAf;AAFc,KAAX,CADQ,EAKnBpB,IALmB,EAArB;AAOA,WAAOqB,MAAP;AACD;AAvDiB,CAApB;AA0DA,eAAe3B,WAAf","sourcesContent":["import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n} from \"../config/config\";\r\n\r\nconst defaultConfig = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n// Types\r\nexport type Movie = {\r\n  backdrop_path: string;\r\n  id: number;\r\n  original_title: string;\r\n  overview: string;\r\n  popularity: number;\r\n  poster_path: string;\r\n  title: string;\r\n  vote_average: number;\r\n  vote_count: number;\r\n  budget: number;\r\n  runtime: number;\r\n  revenue: number;\r\n};\r\n\r\nexport type Movies = {\r\n  page: number;\r\n  results: Movie[];\r\n  total_pages: number;\r\n  total_results: number;\r\n};\r\n\r\nexport type Cast = {\r\n  character: string;\r\n  credit_id: string;\r\n  name: string;\r\n  profile_path: string;\r\n};\r\n\r\nexport type Crew = {\r\n  job: string;\r\n  name: string;\r\n  credit_id: number;\r\n};\r\n\r\nexport type Credits = {\r\n  id: number;\r\n  cast: Cast[];\r\n  crew: Crew[];\r\n};\r\n\r\nconst apiSettings = {\r\n  fetchMovies: async (searchTerm:string, page: number): Promise<Movies> => {\r\n    const endpoint:string = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async (movieId: string): Promise<Movie> => {\r\n    const endpoint:string = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async (movieId: string): Promise<Credits> => {\r\n    const creditsEndpoint:string = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken: string, username:string, password:string) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken,\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData),\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken }),\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId: number, movieId:number, value:string) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value }),\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  },\r\n};\r\n\r\nexport default apiSettings;\r\n"]},"metadata":{},"sourceType":"module"}